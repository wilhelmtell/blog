May 5, 2012

 Resource Acquisition Is Initialization

When we manually acquire a resource--dynamic memory, a file handle, a network
connection--we take the responsibility of releasing the resource at the correct
moment; be it any return point, via an error or otherwise, or at the end of the
resource's scope. The more complex the code within the resource lifetime,
whether in our code or in any function our code calls (and so on recursively),
the more difficult it is to make sure the resource releases correctly and
efficiently.

This is not just about avoiding plain-vanilla leaks: if done manually the code
repeats itself, almost copy-pasted semantically speaking. And it's not just
about eliminating code duplication but also about accounting for errors. We
know errors happen (albeit not precisely when). We have to anticipate that and
make sure our resources clean up regardless of how we leave a function.

A garbage collector only offers a solution for memory leaks, and that solution
is non-deterministic. Instead we take advantage of a useful set of guarantees
C++ has with regard to automatic object lifetime:

 1  An object does not exist, as if never existed to begin with, unless and
    until its constructor successfully completes its business.
 2  Objects destruct at the end of their scope in the reverse order of that in
    which they instantiated.

In the RAII idiom we wrap every resource in a class. We acquire the resource in
the class constructor and release the resource in the class destructor. We then
know that if the resource successfully acquires it will clean up exactly when
it is no longer needed--when the scope of the object ends or when an exception
triggers.

 { std::ofstream undo_file("undo");
 }  // file closes here. no open(), no close()!

 { network net("http://example.com/");
     comm(net);  // if an exception triggers, net automatically cleans up here
 }  // otherwise network session gracefully ends here.

To implement the RAII idiom correctly for a resource the rule of three reminds
us that because we have a destructor we must also think about copy semantics
for the class. In the simplest of cases or when we want to defer implementing
correct copy functions until we need copying we delete the copy constructor and
copy assignment so the resource is not copiable.


April 20, 2012

 auto const

auto const means T const. If T is a pointer of type P then auto const means
auto P * const. If you want to qualify the pointee const then place the const
keyword before an asterisk:

 T* get_pointer();

 void play()
 {
     auto const p0(get_pointer());         // T       * const
     auto * const p1(get_pointer());       // T       * const
     auto const * p2(get_pointer());       // T const *
     auto const * const p3(get_pointer()); // T const * const
 }

This is similar to good old template specializations:

 template<typename T>
 struct block { };

 template<typename T>
 struct block<T*> { };

 template<typename T>
 struct block<T * const> { };

 template<typename T>
 struct block<T const *> { };

 template<typename T>
 struct block<T const * const> { };


April 20, 2012

 A Note on the main Function

Section 3.6.1 of the C++11 standard states that the main function may take
either of these two forms:

 int main() { /* ... */ }

and

 int main(int argc, char* argv[]) { /* ... */ }

If an implementation must allow main to take an argument of type char*[] then a
more const-restricted signature is valid as well:

 int main(int argc, char const * argv[]) { /* ... */ }

And even

 int main(int argc, char const * const argv[]) { /* ... */ }

And if you can, why won't you?


October 21, 2012

I don't find this "cache end()" guideline of LLVM right:
http://llvm.org/docs/CodingStandards.html#don-t-evaluate-end-every-time-through-a-loop
It's a case of premature optimization, and it actually leaves room for error
because the new identifier is a non-const lvalue.


November 10, 2012

Suppose you just committed a large change to your git repository; a commit with
two logical changes. You wish to break this commit into two commits, each with
a logical change. How would you go about this?

You could of course use git-add--interactive, A.K.A "git add -p", prior to
committing your large commit, but for simplicity let's assume you don't have
a time-machine at an arm's reach and it is a tad too late for
git-add--interactive now.

What you can do is subtract the change you want to split out, then revert thi
subtraction so you put it back in, and finally squash the subtraction with the
large commit. Here's the recipe in steps:

 1  remove the code you wish to extract into a commit of its own, and then
    commit that. You can write whatever you wish as a commit message for this
    second commit, because as you'll see we're going to get rid of it soon.

 2  Next, revert this commit you just created. This in effect puts back the
    code you removed.

 3  Last, squash together the two first commits.

Let's work an example. Suppose I create files a and b, then add two lines to
file c, and finally commit all these changes. I then wish to split the commit
into two commits: the first commit adds file a plus the first line to file c,
and the second commit adds file b and the second line to file c. Let's follow
through with the recipe above:

 1  remove the second line we added to file c, and then remove file b. Commit
    these changes. The commit message doesn't matter, but let's write something
    reasonable for the reflog's sake:

     git commit -m"step one of splitting the large commit 04ff563"

 2  Revert this last commit. Here git thinks we're reverting a commit but
    semantically we are in fact splitting a commit, so let's say so:

     git revert --no-commit head
     git commit -m"add b to stagmitize the foo and dormitize c"

    Alternatively say from the commandline

     git revert head

    and write the message in the commit editor that pops up.

 3  One last thing left to do: squash the first commit with the second commit:

     git rebase -i head~3

    In the rebase editor that pops up change the first word in the
    second-to-last line from "pick" to "fixup". This is the line with the
    message "add b to stagmitize the foo and dormitize c". Save and quit the
    editor to let git squash the two commits together.

Of course, you can repeat the procedure to split the commit further. You can
also apply this to any point in the timeline: just rebase-interactive to the
commit you wish to split, apply the steps above, and continue the rebase to put
the rest of history back together on top.
